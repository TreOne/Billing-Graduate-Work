version: '3.8'

services:
  billing_app:
    container_name: billing_app
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: '/home/app/billing/entrypoint.sh'
    volumes:
      - billing_static:/home/app/billing/static
      - billing_logs:/home/app/billing/logs
    expose:
      - 8000
    env_file:
      - example.env
    depends_on:
      billing_postgres_db:
        condition: service_started
      billing_redis:
        condition: service_started
    networks:
      - external_movie_network
    healthcheck:
      test: [ "CMD", "pg_isready -U billing" ]
      interval: 5s
      timeout: 20s
      retries: 100

  billing_celery_worker:
    container_name: billing_celery_worker
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "celery -A config worker -l info"
    env_file:
      - example.env
    volumes:
      - billing_logs:/home/app/billing/logs
    depends_on:
      billing_app:
        condition: service_started
      billing_postgres_db:
        condition: service_started
      billing_redis:
        condition: service_started
    networks:
      - external_movie_network
    healthcheck:
      test: [ "CMD", "pg_isready -U billing" ]
      interval: 5s
      timeout: 20s
      retries: 100

  billing_redis:
    container_name: billing_redis
    image: redis:6.2.6-alpine
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - external_movie_network

  billing_postgres_db:
    container_name: billing_postgres_db
    image: postgres:12.0-alpine
    volumes:
      - billing_postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=billing
      - POSTGRES_USER=billing
      - POSTGRES_PASSWORD=billing
    expose:
      - 5432
    ports:
      - "5432:5432"
    networks:
      - external_movie_network

  billing_celery_beat:
    container_name: billing_celery_beat
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    env_file:
      - example.env
    depends_on:
      billing_app:
        condition: service_started
      billing_postgres_db:
        condition: service_started
      billing_redis:
        condition: service_started
    networks:
      - external_movie_network
    healthcheck:
      test: [ "CMD", "pg_isready -U billing" ]
      interval: 5s
      timeout: 20s
      retries: 100

  billing_flower:
    container_name: billing_flower
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      billing_app:
        condition: service_started
    command: >
      sh -c "celery -A config flower"
    expose:
      - 5555
    env_file:
      - example.env
    networks:
      - external_movie_network

volumes:
  billing_static:
    external: true
  billing_logs:
    external: true
  billing_postgres_data:

networks:
  external_movie_network:
    name: movie_network
